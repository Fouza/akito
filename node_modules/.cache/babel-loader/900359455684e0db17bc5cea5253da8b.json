{"ast":null,"code":"import { useState } from \"react\";\nimport { useCamera } from \"@ionic/react-hooks/camera\";\nimport { useFilesystem, base64FromPath } from \"@ionic/react-hooks/filesystem\";\nimport { isPlatform } from \"@ionic/react\";\nimport { CameraResultType, CameraSource, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nimport \"@ionic/pwa-elements\";\nexport function usePhotoGallery() {\n  const {\n    getPhoto\n  } = useCamera();\n  const [photos, setPhotos] = useState([]);\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem(); //taking\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \".jpeg\";\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage];\n    setPhotos(newPhotos);\n  }; //saving\n\n\n  const savePicture = async (photo, fileName) => {\n    let base64Data; // \"hybrid\" will detect Cordova or Capacitor;\n\n    if (isPlatform(\"hybrid\")) {\n      const file = await readFile({\n        path: photo.path\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath);\n    }\n\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n    if (isPlatform(\"hybrid\")) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n        base64: base64Data\n      };\n    } else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath,\n        base64: base64Data\n      };\n    }\n  };\n\n  return {\n    takePhoto,\n    photos\n  };\n}","map":{"version":3,"sources":["C:/Users/THINKPAD L480/Desktop/Work/akito/src/hooks/usePhotoGallery.tsx"],"names":["useState","useCamera","useFilesystem","base64FromPath","isPlatform","CameraResultType","CameraSource","Capacitor","FilesystemDirectory","usePhotoGallery","getPhoto","photos","setPhotos","deleteFile","getUri","readFile","writeFile","takePhoto","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","photo","base64Data","file","path","data","webPath","savedFile","directory","Data","filepath","uri","webviewPath","convertFileSrc","base64"],"mappings":"AAAA,SAASA,QAAT,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,+BAA9C;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SACEC,gBADF,EAEEC,YAFF,EAIEC,SAJF,EAKEC,mBALF,QAMO,iBANP;AAOA,OAAO,qBAAP;AAQA,OAAO,SAASC,eAAT,GAA2B;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAeT,SAAS,EAA9B;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAU,EAAV,CAApC;AACA,QAAM;AAAEa,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,MAA8Cd,aAAa,EAAjE,CAHgC,CAKhC;;AACA,QAAMe,SAAS,GAAG,YAAY;AAC5B,UAAMC,WAAW,GAAG,MAAMR,QAAQ,CAAC;AACjCS,MAAAA,UAAU,EAAEd,gBAAgB,CAACe,GADI;AAEjCC,MAAAA,MAAM,EAAEf,YAAY,CAACgB,MAFY;AAGjCC,MAAAA,OAAO,EAAE;AAHwB,KAAD,CAAlC;AAKA,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,OAAxC;AACA,UAAMC,cAAc,GAAG,MAAMC,WAAW,CAACV,WAAD,EAAcM,QAAd,CAAxC;AACA,UAAMK,SAAS,GAAG,CAACF,cAAD,CAAlB;AACAf,IAAAA,SAAS,CAACiB,SAAD,CAAT;AACD,GAVD,CANgC,CAiBhC;;;AACA,QAAMD,WAAW,GAAG,OAClBE,KADkB,EAElBN,QAFkB,KAGC;AACnB,QAAIO,UAAJ,CADmB,CAEnB;;AACA,QAAI3B,UAAU,CAAC,QAAD,CAAd,EAA0B;AACxB,YAAM4B,IAAI,GAAG,MAAMjB,QAAQ,CAAC;AAC1BkB,QAAAA,IAAI,EAAEH,KAAK,CAACG;AADc,OAAD,CAA3B;AAGAF,MAAAA,UAAU,GAAGC,IAAI,CAACE,IAAlB;AACD,KALD,MAKO;AACLH,MAAAA,UAAU,GAAG,MAAM5B,cAAc,CAAC2B,KAAK,CAACK,OAAP,CAAjC;AACD;;AACD,UAAMC,SAAS,GAAG,MAAMpB,SAAS,CAAC;AAChCiB,MAAAA,IAAI,EAAET,QAD0B;AAEhCU,MAAAA,IAAI,EAAEH,UAF0B;AAGhCM,MAAAA,SAAS,EAAE7B,mBAAmB,CAAC8B;AAHC,KAAD,CAAjC;;AAMA,QAAIlC,UAAU,CAAC,QAAD,CAAd,EAA0B;AACxB;AACA;AACA,aAAO;AACLmC,QAAAA,QAAQ,EAAEH,SAAS,CAACI,GADf;AAELC,QAAAA,WAAW,EAAElC,SAAS,CAACmC,cAAV,CAAyBN,SAAS,CAACI,GAAnC,CAFR;AAGLG,QAAAA,MAAM,EAAEZ;AAHH,OAAP;AAKD,KARD,MAQO;AACL;AACA;AACA,aAAO;AACLQ,QAAAA,QAAQ,EAAEf,QADL;AAELiB,QAAAA,WAAW,EAAEX,KAAK,CAACK,OAFd;AAGLQ,QAAAA,MAAM,EAAEZ;AAHH,OAAP;AAKD;AACF,GArCD;;AAuCA,SAAO;AACLd,IAAAA,SADK;AAELN,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useCamera } from \"@ionic/react-hooks/camera\";\r\nimport { useFilesystem, base64FromPath } from \"@ionic/react-hooks/filesystem\";\r\nimport { useStorage } from \"@ionic/react-hooks/storage\";\r\nimport { isPlatform } from \"@ionic/react\";\r\nimport {\r\n  CameraResultType,\r\n  CameraSource,\r\n  CameraPhoto,\r\n  Capacitor,\r\n  FilesystemDirectory,\r\n} from \"@capacitor/core\";\r\nimport \"@ionic/pwa-elements\";\r\n\r\nexport interface Photo {\r\n  filepath: string;\r\n  webviewPath?: string;\r\n  base64?: string;\r\n}\r\n\r\nexport function usePhotoGallery() {\r\n  const { getPhoto } = useCamera();\r\n  const [photos, setPhotos] = useState<Photo[]>([]);\r\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\r\n\r\n  //taking\r\n  const takePhoto = async () => {\r\n    const cameraPhoto = await getPhoto({\r\n      resultType: CameraResultType.Uri,\r\n      source: CameraSource.Camera,\r\n      quality: 100,\r\n    });\r\n    const fileName = new Date().getTime() + \".jpeg\";\r\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\r\n    const newPhotos = [savedFileImage];\r\n    setPhotos(newPhotos);\r\n  };\r\n  //saving\r\n  const savePicture = async (\r\n    photo: CameraPhoto,\r\n    fileName: string\r\n  ): Promise<Photo> => {\r\n    let base64Data: string;\r\n    // \"hybrid\" will detect Cordova or Capacitor;\r\n    if (isPlatform(\"hybrid\")) {\r\n      const file = await readFile({\r\n        path: photo.path!,\r\n      });\r\n      base64Data = file.data;\r\n    } else {\r\n      base64Data = await base64FromPath(photo.webPath!);\r\n    }\r\n    const savedFile = await writeFile({\r\n      path: fileName,\r\n      data: base64Data,\r\n      directory: FilesystemDirectory.Data,\r\n    });\r\n\r\n    if (isPlatform(\"hybrid\")) {\r\n      // Display the new image by rewriting the 'file://' path to HTTP\r\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\r\n      return {\r\n        filepath: savedFile.uri,\r\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\r\n        base64: base64Data,\r\n      };\r\n    } else {\r\n      // Use webPath to display the new image instead of base64 since it's\r\n      // already loaded into memory\r\n      return {\r\n        filepath: fileName,\r\n        webviewPath: photo.webPath,\r\n        base64: base64Data,\r\n      };\r\n    }\r\n  };\r\n\r\n  return {\r\n    takePhoto,\r\n    photos,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}